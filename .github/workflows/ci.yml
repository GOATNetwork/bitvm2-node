name: Cargo Build & Test

on:
  push:
    branches:
      - main
    tags:
      - v[0-9]+.*
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: rustup component add clippy
      - run: cargo clippy --all-targets -- -D warnings
  test:
    name: Cargo Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain:
          - nightly
    steps:
      - uses: actions/checkout@v4
      - name: Launch the Regtest
        run: cd scripts && docker compose up -d
      - name: Run all unit tests
        run: cargo test -r --features tests

  create-release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  release:
    name: Build Release
    needs: [fmt, clippy, test, create-release]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: bitvm2-noded-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: bitvm2-noded-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: bitvm2-noded-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: bitvm2-noded-macos-arm64

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          target: ${{ matrix.target }}

      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create Release Directory
        run: mkdir -p release

      - name: Copy Binary
        shell: pwsh
        run: |
          if ("${{ matrix.os }}" -eq "windows-latest") {
            Copy-Item "target/${{ matrix.target }}/release/bitvm2-noded.exe" "release/${{ matrix.artifact_name }}"
          } else {
            Copy-Item "target/${{ matrix.target }}/release/bitvm2-noded" "release/${{ matrix.artifact_name }}"
          }

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.artifact_name }}
          asset_content_type: application/octet-stream
